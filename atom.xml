<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Theory of Coding]]></title>
  <link href="http://minling.github.io/atom.xml" rel="self"/>
  <link href="http://minling.github.io/"/>
  <updated>2015-09-03T01:11:37-04:00</updated>
  <id>http://minling.github.io/</id>
  <author>
    <name><![CDATA[MinLing Zhao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Nested Forms]]></title>
    <link href="http://minling.github.io/blog/2015/09/03/nested-forms/"/>
    <updated>2015-09-03T01:11:08-04:00</updated>
    <id>http://minling.github.io/blog/2015/09/03/nested-forms</id>
    <content type="html"><![CDATA[<h2>Nested Forms with RAILS</h2>

<p>Nested forms is a form within another form. It&rsquo;s nice to not jump between the parent and child forms when creating both the parent and the child in the same form. In this example, I&rsquo;m using Post as a parent and Tags as the child. A Post will have many Tags.</p>

<p>We made <code>form_for</code> for the new Post. We want to make a nested form so that we can create a form for a new Tag also. To do this, we will use <code>fields_for</code> to make a <code>text_field</code> to enter a new tag. We will associate it with <code>@post.tags</code> because I want to make the tag for that particular post, <code>@post</code>.  We will call this <code>fields_for :tags_attributes</code> because I want to set <code>tags_attributes</code> to be included in my private params in my Post controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for(@post) do |f| %&gt;</span>
</span><span class='line'><span class="sx">  ..... #code on the form </span>
</span><span class='line'><span class="sx"> &lt;%=</span> <span class="n">fields_for</span> <span class="ss">:tags_attributes</span><span class="p">,</span> <span class="vi">@post</span><span class="o">.</span><span class="n">tags</span> <span class="k">do</span> <span class="o">|</span><span class="n">tag_field</span><span class="o">|</span> <span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">    New Tag : &lt;%= tag_field.text_field :name %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx"> &lt;%= f.submit %&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p><img src="http://i.imgur.com/X9S3Xn4.png" alt="Imgur" /></p>

<p>See how if you inspect element, this new tag text field is called <code>tags_attributes</code>? That is because that&rsquo;s what we called it in the <code>fields_for</code> and when we press <strong>Submit</strong>, it will have params with that are nicely hashed.</p>

<p>To allow this in our params, we will do add <code>tags_attributes</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span>
</span><span class='line'> <span class="k">def</span> <span class="nf">post_params</span>
</span><span class='line'>      <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:post</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:name</span><span class="p">,</span> <span class="ss">:content</span><span class="p">,</span><span class="ss">:tags_attributes</span> <span class="o">=&gt;[</span><span class="ss">:name</span><span class="o">]</span><span class="p">,</span><span class="ss">:tag_ids</span> <span class="o">=&gt;</span> <span class="o">[]</span><span class="p">)</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember, we wanted to set a new tag name <code>:name</code> to <code>:tags_attributes</code> in our form text field.</p>

<p>As a reminder, we made post_params as a private method so that we can do mass assignment, and prevent a hacker from editing the params and changing something in our forms that we didn&rsquo;t want to change.</p>

<p>Now this will allow us to get a nice hash in our params <code>"tags_attributes"=&gt;{"name"=&gt;"fruit"},</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="p">{</span><span class="s2">&quot;utf8&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;✓&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;authenticity_token&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;RyImq+DI3FBEjDYRd3U9uYbmO2sL+qwE+6t8vsR0nmO//Au7dVYXQZFQqaxYGPk0gSYFS1tRuT935TfKFBQvnA==&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;post&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;hey 5&quot;</span><span class="p">,</span> <span class="s2">&quot;content&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;shdfudhsfdsfdfds&quot;</span><span class="p">,</span> <span class="s2">&quot;tag_ids&quot;</span><span class="o">=&gt;[</span><span class="s2">&quot;148&quot;</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="o">]</span><span class="p">},</span>
</span><span class='line'> <span class="s2">&quot;tags_attributes&quot;</span><span class="o">=&gt;</span><span class="p">{</span><span class="s2">&quot;name&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;fruit&quot;</span><span class="p">},</span>
</span><span class='line'> <span class="s2">&quot;commit&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;Create Post&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;controller&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;posts&quot;</span><span class="p">,</span>
</span><span class='line'> <span class="s2">&quot;action&quot;</span><span class="o">=&gt;</span><span class="s2">&quot;create&quot;</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we got the params we want, we have to actually create the new tag.</p>

<p>In the def create of our Post controller, we will create a new method called tags_attributes to do just that</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1"># for @post, I want to do tags_attributes and set that to the params I just made</span>
</span><span class='line'>  <span class="vi">@post</span><span class="o">.</span><span class="n">tags_attributes</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:tags_attributes</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the Post Controller, if the Tags is an association with Post, you can use <code>accepts_nested_attributes_for</code> to define the write method for you. You can <code>allow_destroy: true</code> so if the post is deleted, this tag will be deleted also.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:post_tags</span>
</span><span class='line'>  <span class="n">accepts_nested_attributes_for</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">allow_destroy</span><span class="p">:</span> <span class="kp">true</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This model can now be used with the nested <code>fields_for</code>. Back in the controller, we were setting the <code>@post.tags_attributes = params[:tags_attributes]</code>. In the model, because we wrote <code>accepts_nested_attributes_for</code>, you have a writer method to set the params from the controller into &lsquo;tags&rsquo; passed into the code below.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">tags_attributes</span><span class="o">=</span><span class="p">(</span><span class="n">tags</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">tags</span><span class="o">.</span><span class="n">build</span><span class="p">(</span><span class="nb">name</span><span class="p">:</span> <span class="n">tags</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we are building tags, setting the name to the passed in params <code>tags[:name]</code>.</p>

<p>That&rsquo;s the gist of it. This allowed me to create a new tag and associate it with this post, without making separate forms.</p>

<p>To read more about nested forms, here is some documentation about it from <a href="http://apidock.com/rails/ActionView/Helpers/FormBuilder/fields_for">ApiDock</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Refactoring]]></title>
    <link href="http://minling.github.io/blog/2015/08/28/refactoring/"/>
    <updated>2015-08-28T01:52:14-04:00</updated>
    <id>http://minling.github.io/blog/2015/08/28/refactoring</id>
    <content type="html"><![CDATA[<h2>Refactoring Code</h2>

<p><strong>Why refactor?</strong></p>

<p>After spending hours writing this piece of code, why would you want to go back to spend more time on refactoring it? It already works! Dealing with the big chunk of code you just wrote seems daunting and tiresome, but it is necessary for adding new features without making huge changes to existing code. Also, it is just easier to read and easier to go back to when you read it again in the future. Depending on what you wrote, there are millions of ways to refactor, but this post just shows what I did to refactor my 28 line method into 12 lines of code. You can check out Sandi Metz&rsquo;s video <a href="https://www.youtube.com/watch?v=8bZh5LMaSmE">&lsquo;All the litting things&rsquo;</a> to get better at refactoring.</p>

<p><strong>Make it go green first</strong></p>

<p>Before refactoring, you must have the code working first. No matter how messy and ugly your code is, just make it work. Make the test pass green!</p>

<p>Here is some code I wrote for the Green Grocer lab, where the apply_coupons method take in a cart and coupon hash argument, and applying the coupon on the cart items if applicable. It should return a hash of the items with the correct quantity, and the &ldquo;item name W/COUPON&rdquo; with the discount.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">apply_coupons</span><span class="p">(</span><span class="ss">cart</span><span class="p">:</span><span class="o">[]</span><span class="p">,</span> <span class="ss">coupons</span><span class="p">:</span><span class="o">[]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">apply_coupons_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>      <span class="n">coupon_items</span> <span class="o">=</span> <span class="o">[]</span> <span class="c1"># get coupon item names</span>
</span><span class='line'>        <span class="n">coupons</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>          <span class="n">coupon_items</span> <span class="o">&lt;&lt;</span> <span class="n">item</span><span class="o">[</span><span class="ss">:item</span><span class="o">]</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="n">cart</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>      <span class="n">attributes</span> <span class="o">=</span> <span class="n">item</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="n">num_of_coupon</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">coupon_price</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">coupons</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">coupon_hash</span><span class="o">|</span> <span class="c1">#get num and cost of that particular item from coupons hash</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">coupon_hash</span><span class="o">[</span><span class="ss">:item</span><span class="o">]</span> <span class="o">==</span> <span class="nb">name</span>
</span><span class='line'>          <span class="n">num_of_coupon</span> <span class="o">=</span> <span class="n">coupon_hash</span><span class="o">[</span><span class="ss">:num</span><span class="o">]</span>
</span><span class='line'>          <span class="n">coupon_price</span> <span class="o">=</span> <span class="n">coupon_hash</span><span class="o">[</span><span class="ss">:cost</span><span class="o">]</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">num_of_coupon</span> <span class="c1">#quantity of item required for coupon to work</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">coupon_items</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">name</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">attributes</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">num_of_coupon</span><span class="p">))</span>
</span><span class='line'>      <span class="c1">#for the current item, if the count is &gt;= coupon quantity requirement</span>
</span><span class='line'>      <span class="c1">#decrease the item count and add the coupon hash </span>
</span><span class='line'>      <span class="n">quantity</span> <span class="o">=</span> <span class="p">(</span><span class="n">attributes</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">/</span> <span class="n">num_of_coupon</span><span class="p">)</span> <span class="c1">#item quantity/coupon quantity</span>
</span><span class='line'>        <span class="n">apply_coupons_hash</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:price</span><span class="o">]</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:clearance</span><span class="o">]</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span><span class="p">(</span><span class="n">attributes</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">num_of_coupon</span> <span class="o">*</span> <span class="n">quantity</span><span class="p">))}</span>
</span><span class='line'>        <span class="n">apply_coupons_hash</span><span class="o">[</span><span class="nb">name</span> <span class="o">+</span> <span class="s1">&#39; W/COUPON&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">coupon_price</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:clearance</span><span class="o">]</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="n">quantity</span><span class="p">}</span>
</span><span class='line'>      <span class="k">else</span> <span class="c1">#if no coupon for this item, then just add the existing item hash to apply_coupons_hash</span>
</span><span class='line'>        <span class="n">apply_coupons_hash</span><span class="o">[</span><span class="nb">name</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:price</span><span class="o">]</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:clearance</span><span class="o">]</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="n">attributes</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">apply_coupons_hash</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This monstrous piece of code is 28 lines long&hellip;
No way am I going to remember what each part does a week later.</p>

<p>Here is my refactored version of the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">apply_coupons</span><span class="p">(</span><span class="ss">cart</span><span class="p">:</span><span class="o">[]</span><span class="p">,</span> <span class="ss">coupons</span><span class="p">:</span><span class="o">[]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">apply_coupons_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">cart</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="n">item_hash</span> <span class="o">=</span> <span class="n">build_item_hash</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>      <span class="n">matching_coupon_for_item</span> <span class="o">=</span> <span class="n">coupons</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span><span class="o">|</span><span class="n">coupon</span><span class="o">|</span> <span class="n">coupon</span><span class="o">[</span><span class="ss">:item</span><span class="o">]</span> <span class="o">==</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">matching_coupon_for_item</span> <span class="o">&amp;&amp;</span> <span class="n">can_apply_coupon?</span><span class="p">(</span><span class="n">item_hash</span><span class="p">,</span> <span class="n">matching_coupon_for_item</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quantity</span> <span class="o">=</span> <span class="p">(</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">/</span> <span class="n">matching_coupon_for_item</span><span class="o">[</span><span class="ss">:num</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="n">apply_coupons_hash</span><span class="o">[</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:price</span><span class="o">]</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:clearance</span><span class="o">]</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span><span class="p">(</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">matching_coupon_for_item</span><span class="o">[</span><span class="ss">:num</span><span class="o">]</span> <span class="o">*</span> <span class="n">quantity</span><span class="p">))}</span>
</span><span class='line'>        <span class="n">apply_coupons_hash</span><span class="o">[</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">+</span> <span class="s1">&#39; W/COUPON&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">matching_coupon_for_item</span><span class="o">[</span><span class="ss">:cost</span><span class="o">]</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:clearance</span><span class="o">]</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="n">quantity</span><span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">apply_coupons_hash</span><span class="o">[</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:price</span><span class="o">]</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:clearance</span><span class="o">]</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">apply_coupons_hash</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s only 12 lines long compared to my 28 line code before!! There is hope.</p>

<p><strong>Change data structure to fit your needs</strong></p>

<p>I can totally get rid of these lines of code if I had the data structure I wanted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cart</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="n">item</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>      <span class="n">attributes</span> <span class="o">=</span> <span class="n">item</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>      <span class="n">num_of_coupon</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">coupon_price</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>      <span class="n">coupons</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">coupon_hash</span><span class="o">|</span> <span class="c1">#get num and cost of that </span>
</span></code></pre></td></tr></table></div></figure>


<p>The reason why I set variables for those things, was because the current array I&rsquo;m getting from |item| is this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="s2">&quot;AVOCADO&quot;</span><span class="p">,</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="mi">2</span><span class="p">}</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>I had to do item[0] to get the name of the item, and etc,. All I wanted to do here was to get the information from the item so I can use it later in my if statement. These 4 lines of code can be replaced into 1 if I had the data structure to simply say something like item_hash[:name] to JUST get the name.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cart</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>  <span class="n">item_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=</span> <span class="n">item_array</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="n">item_hash</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">item_array</span><span class="o">.</span><span class="n">last</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">#this is the return value</span>
</span><span class='line'>  <span class="c1">#=&gt; {:name=&gt;&quot;AVOCADO&quot;, :price=&gt;3.0, :clearance=&gt;true, :count=&gt;2}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Don&rsquo;t be afraid to make new methods</strong></p>

<p>Knowing the single responsibility rule, getting the item hash seems like it should be it&rsquo;s own method. Rebuilding the datastructure is for our own ease, and has nothing to do with apply_coupons. Don&rsquo;t worry about adding more methods and adding more lines of code. This is usually the result of refactoring; abstracting parts away into their own methods make them reusable and clear to the reader what this function is doing.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">build_item_hash</span><span class="p">(</span><span class="n">item_array</span><span class="p">)</span>
</span><span class='line'>  <span class="n">item_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>  <span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">=</span> <span class="n">item_array</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>  <span class="n">item_hash</span><span class="o">.</span><span class="n">merge!</span><span class="p">(</span><span class="n">item_array</span><span class="o">.</span><span class="n">last</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we dumped that into it&rsquo;s own method, our cart.each do looks a litle bit better.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">cart</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="n">item_hash</span> <span class="o">=</span> <span class="n">build_item_hash</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, I tried to iterate over coupons to grab the coupon that matches the current item name, so that I can check if items in the cart meet the coupon requirement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">coupons</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">coupon_hash</span><span class="o">|</span> <span class="c1">#get num and cost of that particular item from coupons hash</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">coupon_hash</span><span class="o">[</span><span class="ss">:item</span><span class="o">]</span> <span class="o">==</span> <span class="nb">name</span>
</span><span class='line'>          <span class="n">num_of_coupon</span> <span class="o">=</span> <span class="n">coupon_hash</span><span class="o">[</span><span class="ss">:num</span><span class="o">]</span>
</span><span class='line'>          <span class="n">coupon_price</span> <span class="o">=</span> <span class="n">coupon_hash</span><span class="o">[</span><span class="ss">:cost</span><span class="o">]</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">num_of_coupon</span> <span class="c1">#quantity of item required for coupon to work</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">if</span> <span class="p">((</span><span class="n">coupon_items</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">name</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">attributes</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">num_of_coupon</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Look for specialized methods to do the job</strong></p>

<p>Sure, you can use the broad .each method on anything, but there are many methods out there that you can use that will make your life easier. Here is a list of <a href="http://overapi.com/ruby/">ruby methods</a> for reference! You can see methods you can use for arrays, strings, etc,.</p>

<p>Instead of iterating through the coupons to check if the item name matched with the coupon name, and then returning the quantity requirement (num) for the coupon, I can just approach this differently and just use a more specialized method, &lsquo;detect&rsquo; to see if the coupon exists for this item.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">matching_coupon_for_item</span> <span class="o">=</span> <span class="n">coupons</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span><span class="o">|</span><span class="n">coupon</span><span class="o">|</span> <span class="n">coupon</span><span class="o">[</span><span class="ss">:item</span><span class="o">]</span> <span class="o">==</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Those 6 lines just turned into a 1 liner, after using .detect instead of .each</p>

<p><strong>Writing code I wish I had</strong></p>

<p>Sometimes if you don&rsquo;t know what to write, you can start by writing a method that you wish you had, and then try to make the method!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="p">((</span><span class="n">coupon_items</span><span class="o">.</span><span class="n">include?</span><span class="p">(</span><span class="nb">name</span><span class="p">))</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">attributes</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">num_of_coupon</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>After all of the refactoring I did above, I FINALLY reach my if statement to see if there is a coupon that matches the current item, AND see if the quantity requirement of the coupon was met by the item count. If someone was reading this, they&rsquo;d have to find out what attributes is , and what num of coupon means also. Wouldn&rsquo;t it be nice to just write &ldquo;can apply coupon?&rdquo; ?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">can_apply_coupon?</span><span class="p">(</span><span class="n">item_hash</span><span class="p">,</span> <span class="n">matching_coupon_for_item</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">&gt;=</span> <span class="n">matching_coupon_for_item</span><span class="o">[</span><span class="ss">:num</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I made this into a new method. Although it did not decrease my lines of code, it did make it clear what I was trying to do in my if statement.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">matching_coupon_for_item</span> <span class="o">&amp;&amp;</span> <span class="n">can_apply_coupon?</span><span class="p">(</span><span class="n">item_hash</span><span class="p">,</span> <span class="n">matching_coupon_for_item</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, I can proceed to do what I wanted to do all along, for this one apply coupons method. For the refactored version, you can see the resulting method goes straight into just applying the coupons to the cart and returning the new hash if there was a coupon that exists and if the requirement is met.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">apply_coupons</span><span class="p">(</span><span class="ss">cart</span><span class="p">:</span><span class="o">[]</span><span class="p">,</span> <span class="ss">coupons</span><span class="p">:</span><span class="o">[]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">apply_coupons_hash</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>    <span class="n">cart</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
</span><span class='line'>      <span class="n">item_hash</span> <span class="o">=</span> <span class="n">build_item_hash</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>      <span class="n">matching_coupon_for_item</span> <span class="o">=</span> <span class="n">coupons</span><span class="o">.</span><span class="n">detect</span> <span class="p">{</span><span class="o">|</span><span class="n">coupon</span><span class="o">|</span> <span class="n">coupon</span><span class="o">[</span><span class="ss">:item</span><span class="o">]</span> <span class="o">==</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">matching_coupon_for_item</span> <span class="o">&amp;&amp;</span> <span class="n">can_apply_coupon?</span><span class="p">(</span><span class="n">item_hash</span><span class="p">,</span> <span class="n">matching_coupon_for_item</span><span class="p">)</span>
</span><span class='line'>        <span class="n">quantity</span> <span class="o">=</span> <span class="p">(</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">/</span> <span class="n">matching_coupon_for_item</span><span class="o">[</span><span class="ss">:num</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>        <span class="n">apply_coupons_hash</span><span class="o">[</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:price</span><span class="o">]</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:clearance</span><span class="o">]</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span><span class="p">(</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span> <span class="o">-</span> <span class="p">(</span><span class="n">matching_coupon_for_item</span><span class="o">[</span><span class="ss">:num</span><span class="o">]</span> <span class="o">*</span> <span class="n">quantity</span><span class="p">))}</span>
</span><span class='line'>        <span class="n">apply_coupons_hash</span><span class="o">[</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]</span> <span class="o">+</span> <span class="s1">&#39; W/COUPON&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">matching_coupon_for_item</span><span class="o">[</span><span class="ss">:cost</span><span class="o">]</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:clearance</span><span class="o">]</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="n">quantity</span><span class="p">}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">apply_coupons_hash</span><span class="o">[</span><span class="n">item_hash</span><span class="o">[</span><span class="ss">:name</span><span class="o">]]</span> <span class="o">=</span> <span class="p">{</span><span class="ss">:price</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:price</span><span class="o">]</span><span class="p">,</span> <span class="ss">:clearance</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:clearance</span><span class="o">]</span><span class="p">,</span> <span class="ss">:count</span> <span class="o">=&gt;</span> <span class="n">item_hash</span><span class="o">[</span><span class="ss">:count</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">apply_coupons_hash</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1"># returns the new hash of the updated cart after coupons are applied</span>
</span><span class='line'><span class="c1">#=&gt; {&quot;AVOCADO&quot;=&gt;{:price=&gt;3.0, :clearance=&gt;true, :count=&gt;0},</span>
</span><span class='line'><span class="c1">#=&gt;  &quot;AVOCADO W/COUPON&quot;=&gt;{:price=&gt;5.0, :clearance=&gt;true, :count=&gt;1}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In summary, these are things you should keep in mind when refactoring:</p>

<ul>
<li>Make it go green first</li>
<li>Change data structure to fit your needs</li>
<li>Don&rsquo;t be afraid to make new methods</li>
<li>Look for specialized methods to do the job</li>
<li>Writing methods I wish I had</li>
</ul>


<p>Don&rsquo;t freak out when your tests turn red, it&rsquo;ll take a while before it turns green again, but it&rsquo;s worth it.</p>

<p>In general, when you use .each and your code looks like a sandwich, you should be thinking of other iterators that is made specifically for the type of function you&rsquo;re trying to do.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">new_array</span> <span class="o">=</span> <span class="o">[]</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">numbers</span><span class="o">|</span>
</span><span class='line'>  <span class="n">new_array</span> <span class="o">&lt;&lt;</span> <span class="n">numbers</span><span class="o">.</span><span class="n">even?</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">new_array</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this sandwich, you set a new empty array, do the iteration to grab stuff and put it into the empty array, and then return the new array. This can be easily done with select, or collect.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="o">].</span><span class="n">select</span> <span class="p">{</span> <span class="o">|</span><span class="n">num</span><span class="o">|</span>  <span class="n">num</span><span class="o">.</span><span class="n">even?</span>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most of the time, when there is duplication of code, you can probably abstract it away into a method. However, don&rsquo;t make the wrong abstraction. It&rsquo;s better to have duplication than the wrong abstraction. As Sandi Metz says, it&rsquo;s like surfing farther and farther out into the ocean, when you&rsquo;re doing the wrong abstraction.</p>

<p>When writing code, always try to be explicit as possible, because it&rsquo;ll make it easier for other people to understand your code. You can use comments to explain what you&rsquo;re doing here, but try to make your code so clear that comments are not needed at all to explain what you&rsquo;re trying to do.</p>

<p>I only recently started refactoring code, but I hope you&rsquo;ll keep these things in mind when you decide to refactor. Sandi Metz gave a talk on refactoring called <a href="https://www.youtube.com/watch?v=8bZh5LMaSmE">&lsquo;All the litting things&rsquo;</a> and you should check it out to get better at it!
Here is a <a href="http://ghendry.net/refactor.html">cheat sheet</a> on refactoring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In-App Messaging]]></title>
    <link href="http://minling.github.io/blog/2015/08/14/in-app-messaging/"/>
    <updated>2015-08-14T00:16:32-04:00</updated>
    <id>http://minling.github.io/blog/2015/08/14/in-app-messaging</id>
    <content type="html"><![CDATA[<h2>Building a Messaging System</h2>

<p>After trying to deploy to heroku with an in-app messaging system with the mailboxer gem, the messaging system seemed to be broken. After trying to fixing it for 4 hours, with a lack of documentation on it on the internet, I decided to build my own messaging app from scratch.</p>

<p>This messaging system was built for my project, CampusBazaar, which allows users to message sellers about items to ask questions or to pick places to meet up on campus. Just thinking about how to organize the app was the most difficult part of the app. Knowing how the messaging app is associated with other parts of the app is important.</p>

<p>For my purpose, I wanted a messaging system that knows about the item that the sender is inquiring about. Any time someone inquires about an item, a new conversation is started between the two users. If the user inquires about another item from the same user, there will be a separate conversation, because it solely based on the item.</p>

<p>Basically, this is what should happen
You will click on Contact seller button on the item show page
<img src="http://i.imgur.com/vMkdyCR.png" alt="Imgur" /></p>

<p>Then, a new conversation will be started between you two. This means the message form will be nested inside the conversation form
<img src="http://i.imgur.com/2MWFoF5.png" alt="Imgur" /></p>

<p>Lastly, this will be the messaging app containing all your conversations, and you can see all the messages that belong to that particular conversation.
<img src="http://i.imgur.com/RecSBAJ.png" alt="Imgur" /></p>

<p>To start, we should make a migration for conversations. Essentially, there will be a conversation between two users, and it is connected to an item. This is basically a join table.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateConversation</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:conversations</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:user1_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:user2_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:item_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, we have the messages migration. There will be a sender_id and recipient_id and not a user1_id and a user2_id like in the conversation migration because it matters who is the sender or not, whereas in the conversation migration, it is just two people talking to each other, regardless of who sent the message first, or who is the sender or recipient. Each messsage will belong to a conversation, hence the conversation_id.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreateMessage</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:messages</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:sender_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:recipient_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:conversation_id</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:content</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">boolean</span> <span class="ss">:read</span><span class="p">,</span> <span class="ss">:default</span> <span class="o">=&gt;</span> <span class="kp">false</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">timestamps</span> <span class="ss">null</span><span class="p">:</span> <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now for the associations. This is the conversation model. It will belong to a item, the users that are talking to each other, and has many messages. It belongs to a user with a foreign key of class name &lsquo;User&rsquo; so that we can do ask the console about the user of that conversation when doing Conversation.user1</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Conversation</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:item</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user1</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="ss">:user1_id</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;User&#39;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:user2</span><span class="p">,</span><span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="ss">:user2_id</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;User&#39;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:messages</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#self is the conversation itself, from the message form @conversation</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">recipient</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">current_user</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">user1_id</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">user2_id</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">(</span><span class="n">current_user</span><span class="o">.</span><span class="n">id</span> <span class="o">==</span> <span class="nb">self</span><span class="o">.</span><span class="n">user2_id</span><span class="p">)</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">user1_id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This isthe messsage associations. It will belong to a conversation, also belong to a recipient and sender, associating that with the User class like in the Conversation model with foreign keys. The message will also belong to a sender. There will be many people inquiring about an item, but there will only be one buyer, who is actually going to buy the item.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Message</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:conversation</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:recipient</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="ss">:recipient_id</span><span class="p">,</span><span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;User&#39;</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:sender</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="ss">:sender_id</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;User&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that if you have a belongs_to association, the counterpart will have a has_many associtation. A user will have many items and conversations as user1 or user2.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:community</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:items</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s1">&#39;seller_id&#39;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:offers_sent</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s2">&quot;Offer&quot;</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s1">&#39;buyer_id&#39;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:conversations</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s1">&#39;user1_id&#39;</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:conversations</span><span class="p">,</span> <span class="ss">:foreign_key</span> <span class="o">=&gt;</span> <span class="s1">&#39;user2_id&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the item will have many conversations, because the conversation also belongs to an item. There will be many inquiries from potential buyers but there will just be one buyer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Item</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:delete_product</span><span class="p">,</span> <span class="ss">:delete_avatar</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:seller</span><span class="p">,</span> <span class="ss">:class_name</span> <span class="o">=&gt;</span> <span class="s1">&#39;User&#39;</span>
</span><span class='line'>  <span class="n">delegate</span> <span class="ss">:community</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="ss">:seller</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:item_categories</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:categories</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:item_categories</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:offers</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:conversations</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&rsquo;s not forget about our routes. There will be messages nested under routes, but only the GET request of index and POST of create will be needed because we will show all the messages for that particular conversation, and we need to create new messages. There will be no need of other routes such as the Show method because we will not be showing each individual message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">resources</span> <span class="ss">:conversations</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">resources</span> <span class="ss">:messages</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:create</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, understanding that we will click Contact Seller from the items page, it will do a GET request to go to the new_conversation_path to see the form to create a new conversation. We will nest the message form inside the conversation form because upon creation of a conversation, there should be a message.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ConversationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@users</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="vi">@conversations</span> <span class="o">=</span> <span class="no">Conversation</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@conversation</span> <span class="o">=</span> <span class="no">Conversation</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">conversation_params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@conversation</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="vi">@message</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>    <span class="vi">@message</span><span class="o">.</span><span class="n">conversation_id</span> <span class="o">=</span> <span class="vi">@conversation</span><span class="o">.</span><span class="n">id</span>
</span><span class='line'>    <span class="vi">@message</span><span class="o">.</span><span class="n">recipient_id</span> <span class="o">=</span> <span class="vi">@conversation</span><span class="o">.</span><span class="n">user2_id</span>
</span><span class='line'>    <span class="vi">@message</span><span class="o">.</span><span class="n">sender_id</span> <span class="o">=</span> <span class="vi">@conversation</span><span class="o">.</span><span class="n">user1_id</span>
</span><span class='line'>    <span class="vi">@message</span><span class="o">.</span><span class="n">content</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:conversation</span><span class="o">][</span><span class="ss">:messages</span><span class="o">][</span><span class="ss">:content</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@message</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">conversations_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">new</span>
</span><span class='line'>    <span class="c1">#binding.pry</span>
</span><span class='line'>    <span class="vi">@item</span> <span class="o">=</span> <span class="no">Item</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:item_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">conversation_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:conversation</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:user1_id</span><span class="p">,</span> <span class="ss">:user2_id</span><span class="p">,</span> <span class="ss">:item_id</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the form. I added hidden fields to pass into private params in th controller. Once the form is submitted, it will send a POST request to the server and do its thing at the def create in the Conversation Controller. The params will be set in the new instance Conversation and saved, and a new message will also be created with all the passed in information.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="sx">%= form_for Conversation.new do |f| %&gt;</span>
</span><span class='line'><span class="sx">  Seller: &lt;%=</span> <span class="vi">@item</span><span class="o">.</span><span class="n">seller</span><span class="o">.</span><span class="n">name</span><span class="sx">%&gt;&lt;br&gt;</span>
</span><span class='line'>  <span class="ss">Buyer</span><span class="p">:</span> <span class="o">&lt;</span><span class="sx">%= current_user.name %&gt;&lt;br&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sx">  Message for item: &lt;%=</span> <span class="vi">@item</span><span class="o">.</span><span class="n">name</span> <span class="sx">%&gt;&lt;br /&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= f.hidden_field :item_id, :value =</span><span class="o">&gt;</span> <span class="vi">@item</span><span class="o">.</span><span class="n">id</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.hidden_field :user2_id, :value =&gt;</span> <span class="vi">@item</span><span class="o">.</span><span class="n">seller</span><span class="o">.</span><span class="n">id</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.hidden_field :user1_id, :value =&gt;</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="sx">%&gt;</span>
</span><span class='line'><span class="sx">#this is the nested form</span>
</span><span class='line'><span class="sx">  &lt;%= f.fields_for :messages do |message_form| %&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">%= message_form.label :content %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%=</span> <span class="n">message_form</span><span class="o">.</span><span class="n">text_area</span> <span class="ss">:content</span><span class="p">,</span> <span class="ss">:rows</span> <span class="o">=&gt;</span> <span class="s2">&quot;5&quot;</span><span class="p">,</span> <span class="ss">placeholder</span><span class="p">:</span> <span class="s1">&#39;Write your message here&#39;</span><span class="sx">%&gt;&lt;br /&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="sx">% end %&gt;</span>
</span><span class='line'><span class="sx">  &lt;%= f.submit &#39;Send Message&#39; %&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="sx">% end </span><span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once that conversation is created, it will redirect to the def index, to see all their conversations they ever had. If they clicked on a conversation, it will basically send a GET request to the Messages Controller to give back the index page of the messages pertaining to that conversation, given that the id of the conversation is passed in.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="vi">@conversation</span> <span class="o">=</span> <span class="no">Conversation</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:conversation_id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@recipient</span> <span class="o">=</span> <span class="vi">@conversation</span><span class="o">.</span><span class="n">recipient</span><span class="p">(</span><span class="n">current_user</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@messages</span> <span class="o">=</span> <span class="vi">@conversation</span><span class="o">.</span><span class="n">messages</span>
</span><span class='line'>    <span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">html</span> <span class="p">{}</span>
</span><span class='line'>        <span class="nb">format</span><span class="o">.</span><span class="n">js</span> <span class="p">{}</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="vi">@message</span> <span class="o">=</span> <span class="no">Message</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">message_params</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@message</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="n">redirect_to</span> <span class="n">conversation_messages_path</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="kp">private</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">message_params</span>
</span><span class='line'>    <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:message</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:conversation_id</span><span class="p">,</span> <span class="ss">:recipient_id</span><span class="p">,</span> <span class="ss">:sender_id</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Where it&rsquo;s actually going is /conversations/:id/messages, so params will have the id of the conversation. Javascript was used to render the partials so that when you click on the conversation, it will allow ajax to render the messages, without the page ever refreshing.</p>

<p><img src="http://i.imgur.com/RecSBAJ.png" alt="Imgur" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazons3 + Paperclip]]></title>
    <link href="http://minling.github.io/blog/2015/08/11/amazons3-plus-paperclip/"/>
    <updated>2015-08-11T23:39:47-04:00</updated>
    <id>http://minling.github.io/blog/2015/08/11/amazons3-plus-paperclip</id>
    <content type="html"><![CDATA[<h2>Amazon S3 with PaperClip with Rails</h2>

<h3>CampusBazaar</h3>

<p>I&rsquo;m currently working on our second project, CampusBazaar, a rails app that allows students to sell their items with their fellow students at their campus. It provides them a way to organize a small shop to sell things that they may not need when moving, or just things in general, such as clothes, mattresses, etc. Upon registration with a .edu email, they are added to their school community.
Since pictures are much needed for the item listings, the <a href="https://github.com/thoughtbot/paperclip">Paperclip Gem</a> by thoughtbot was used. For installation, just click on the link above.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;paperclip&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Why Amazon S3?</h3>

<p>When we pushed to Heroku, we realized that the pictures from our database did not stay on the site; it eventually turned into a broken link photo within 5 minutes. It was time to host the pictures externally, because heroku&rsquo;s dyno restarts, and the image is lost after that. A more stable way is to upload an image directly from the client side and just save the reference url to the database.</p>

<ol>
<li>You don&rsquo;t have to use up lots of storage space on your app.</li>
<li>Pulling images from the rails stack every time will make your app super slow.</li>
<li>It will disappear from Heroku anyway</li>
<li><a href="https://aws.amazon.com/s3/">Amazon S3(Simple Storage System)</a> is cheap, it&rsquo;s free for 12 months, or until 5 GB is used, or 20,000 GET or 2,000 PUT Requests.</li>
<li>After your free tier is over, you can get it for $0.03 per GB for the first 1 TB/month.</li>
</ol>


<p><img src="http://www.oxalto.co.uk/wp-content/uploads/2012/12/amazon.png" alt="Amazon S3" /></p>

<h3>Installation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;aws-sdk&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Assuming paperclip was already properly set up, bundle install the &lsquo;aws-sdk&rsquo; gem now.</p>

<p>First, get an Amazon S3 account and create a :bucket for your app.
You will also need your Amazon Access Key and the Amazon Secret key.</p>

<p>I saved my keys in my application.yml file. This file will not be pushed to github, so don&rsquo;t worry about people stealing your keys. You must set up the <a href="https://github.com/laserlemon/figaro">figaro gem</a> to use this feature. Remember to put your key in single quotes &lsquo; &rsquo;, and not double quotes &ldquo; &rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/application.yml</span>
</span><span class='line'>  <span class="ss">amazon_access_key</span><span class="p">:</span> <span class="s1">&#39;INSERT YOUR KEY HERE&#39;</span>
</span><span class='line'>  <span class="ss">amazon_secret</span><span class="p">:</span> <span class="s1">&#39;INSERT YOUR KEY HERE&#39;</span>
</span><span class='line'>  <span class="ss">amazon_bucket_name</span><span class="p">:</span> <span class="s1">&#39;INSERT YOUR BUCKET NAME HERE&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>From then on, I encountered some problems. I searched around google to find out how to set up Amazon S3 with paperclip, and every post seems to have a different answer. There were two posts that were helpful, but did not work for me. It was possible that since my keys were stored in my application.yml file that was not uploaded, it was not able to access my keys. You can try these posts, <a href="https://github.com/thoughtbot/paperclip/wiki/Paperclip-with-Amazon-S3">thoughtbot</a> or <a href="https://devcenter.heroku.com/articles/paperclip-s3">devcenter.heroku</a> to see if they work for you. If not, you can follow my tutorial below.</p>

<p>In my config/environments/production.rb, I put the code below. As a reminder, you can get your keys from your application.yml file by using calling ENV[&lsquo;whatever you named your key&rsquo;].
ex. ENV[&lsquo;amazon_secret&rsquo;]</p>

<p>We&rsquo;re specifying the AWS configuration variables so that we can use it when your app is in production when its up on heroku.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/environemnts/production.rb</span>
</span><span class='line'><span class="n">config</span><span class="o">.</span><span class="n">paperclip_defaults</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:storage</span> <span class="o">=&gt;</span> <span class="ss">:s3</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:s3_credentials</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:bucket</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;amazon_bucket_name&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:access_key_id</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;amazon_access_keys&#39;</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:secret_access_key</span> <span class="o">=&gt;</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;amazon_secret&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, I put my paperclip config in the development.rb so that I can test it out during development in my localhost:3000</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/environments/development.rb</span>
</span><span class='line'>  <span class="n">config</span><span class="o">.</span><span class="n">paperclip_defaults</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="ss">:storage</span> <span class="o">=&gt;</span> <span class="ss">:s3</span><span class="p">,</span>
</span><span class='line'>  <span class="c1">#:s3_host_name =&gt; &#39;REMOVE_THIS_LINE_IF_YOURE_IN_THE_US&#39;,</span>
</span><span class='line'>  <span class="ss">:s3_credentials</span> <span class="o">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:bucket</span> <span class="o">=&gt;</span> <span class="s1">&#39;YOUR BUCKET NAME&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, create a aws.yml file in your config directory, if it was not automatically loaded by aws-sdk. You can put different keys in here if you want to</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># config/aws.yml</span>
</span><span class='line'><span class="ss">development</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">access_key_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;amazon_access_key&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="ss">secret_access_key</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;amazon_secret&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="ss">production</span><span class="p">:</span>
</span><span class='line'>  <span class="ss">access_key_id</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;amazon_access_key&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="ss">secret_access_key</span><span class="p">:</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;amazon_secret&#39;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will be pushed to github, so don&rsquo;t try to just write your keys here. People will be able to steal your keys. Don&rsquo;t try to put this in your .gitignore file either, this is essential for the Amazon S3 to work. Just use ENV to grab your keys from your application.yml file.</p>

<p>Lastly, you must add your AWS configuration variables onto heroku in your settings, or you can do it through the command line. Just remember to call the keys the same way you called it in your app. Once you push to heroku master, everything should work.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">heroku</span> <span class="ss">config</span><span class="p">:</span><span class="n">set</span> <span class="n">amazon_bucket_name</span><span class="o">=</span><span class="n">your_bucket_name</span>
</span><span class='line'><span class="err">$</span> <span class="n">heroku</span> <span class="ss">config</span><span class="p">:</span><span class="n">set</span> <span class="n">amazon_access_key</span><span class="o">=</span><span class="n">your_access_key_id</span>
</span><span class='line'><span class="err">$</span> <span class="n">heroku</span> <span class="ss">config</span><span class="p">:</span><span class="n">set</span> <span class="n">amazon_secret</span><span class="o">=</span><span class="n">your_secret_access_key</span>
</span></code></pre></td></tr></table></div></figure>


<p>To check whether or not it was successful, on your localhost, do inspect element on your uploaded photo, and see if the url is an amazon url. Then, in production on heroku, also check to see if the url is an amazon url. If it is, then congratulations, you have successfully set up Amazon S3. Happy uploading.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gon Gem]]></title>
    <link href="http://minling.github.io/blog/2015/07/29/gon-gem/"/>
    <updated>2015-07-29T00:58:10-04:00</updated>
    <id>http://minling.github.io/blog/2015/07/29/gon-gem</id>
    <content type="html"><![CDATA[<h2>Gon Gem</h2>

<p><img src="https://github.com/gazay/gon/raw/master/doc/logo_small.png" alt="gon" /></p>

<p>We&rsquo;ve started project mode this week and it&rsquo;s been pretty cool building our own apps without any tests to pass, and solve real world problems with our application. I&rsquo;ve learned a lot of new things and one of them new gems I learned to make my life easier is the <a href="https://github.com/gazay/gon">Gon Gem!</a></p>

<h3>Why Use Gon?</h3>

<p>Gon is a ruby gem that you can use to send some data to your javascript files without getting it from your views and parsing it. It&rsquo;s quick and easy and will save you a lot of time trying to connect the path from getting it to your javascript file. YOu can renew data in your variables through ajax with gon.watch, and it also supports Jbuilder, Rabl, and Rabl-Rails. You can learn more about Gon by click on the link above.</p>

<h3>How I encountered the problem</h3>

<p>While I was working on our project on using the foursquare API to find the BEST places to eat &ndash; not just random restaurants around you, but venues that people keep going back to, I encountered the problem of parsing jSON from the Geonames API. In my javascript file, I was trying to display the location of your city and zipcode, by using the longitude and latitude of your current location. But before I can even parse it, I have to put in my username for the API and since I didn&rsquo;t want hackers on github to hack my API key, I wanted to put it in the <a href="https://github.com/laserlemon/figaro">figaro</a> file, which loads its values to ENV and puts it in .gitignore. I wanted to access my API key from my ENV and put it to my javascript file, but it was really hard to.</p>

<h3>Initial efforts</h3>

<p>Maybe we can just pull the ENV into a variable! WRONG</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">ENV</span><span class="p">[</span><span class="s1">&#39;geonames_username&#39;</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Maybe we need to interpolate it, this is from a ruby file, afterall. I changed the searches.js file into searches.js.erb so I can write ruby in it. In my file, I tried to set the api key to a variable username. WRONG</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="o">&lt;%=</span> <span class="nx">ENV</span><span class="p">[</span><span class="s1">&#39;geonames_username&#39;</span><span class="p">]</span> <span class="o">%&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I tried to concatenate it into my API link to parse. WRONG</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">link</span> <span class="o">=</span> <span class="s2">&quot;http://api.geonames.org/findNearestAddressJSON?lat=&quot;</span> <span class="o">+</span> <span class="nx">latitude</span> <span class="o">+</span> <span class="s2">&quot;&amp;lng=&quot;</span> <span class="o">+</span> <span class="nx">longitude</span> <span class="o">+</span> <span class="s2">&quot;&amp;username=&quot;</span> <span class="o">+</span> <span class="nx">username</span>
</span></code></pre></td></tr></table></div></figure>


<p>Apparently, that still gave me nothing. my var username was just an empty string, which resuilted in a bad API link.</p>

<p>Here is where the Gon Gem came in. One of our instructors, Sophie, recommended this gem, which made it much easier to access data to my javascript file, because I was not able to get data from the ENV. It was pretty simple to set up also.</p>

<h3>With the Gon Gem</h3>

<p>In your Gemfile, you will add the gem</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">gem</span> <span class="s1">&#39;gon&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then you will bundle install to install the gem into your computer. If you haven&rsquo;t already, add the api key to your application.yml from your figaro gem, like you usually would for regular ruby. Make sure it is in single quotes &lsquo;&rsquo; and not double quotes &ldquo; &rdquo;, I made the mistake of using double quotes and it was not taken well when you ask for it in your model when you do ENV[&lsquo;api_key&rsquo;].</p>

<p>To access it in your javascript file, go to the controller where you are trying to use the api key on that page and define it so your js file can grab it from the controller.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@search</span> <span class="o">=</span> <span class="no">Search</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>  <span class="n">gon</span><span class="o">.</span><span class="n">username</span> <span class="o">=</span> <span class="no">ENV</span><span class="o">[</span><span class="s1">&#39;geonames_username&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In your javascript file, you can set the variable username to gon.username</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">username</span> <span class="o">=</span> <span class="nx">gon</span><span class="p">.</span><span class="nx">username</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now this will work and you can continue parsing your data efficiently!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">link</span> <span class="o">=</span> <span class="s2">&quot;http://api.geonames.org/findNearestAddressJSON?lat=&quot;</span> <span class="o">+</span> <span class="nx">latitude</span> <span class="o">+</span> <span class="s2">&quot;&amp;lng=&quot;</span> <span class="o">+</span> <span class="nx">longitude</span> <span class="o">+</span> <span class="s2">&quot;&amp;username=&quot;</span> <span class="o">+</span> <span class="nx">username</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Gon gem has been useful to me. Although this was a relatively easy problem to fix, there are probably other harder and deeper problems you can use it with that is best suited for this gem. For more information the typical uses and what you can use it with, you can go here!
<a href="https://github.com/gazay/gon">Gon gem</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tale of Two Languages]]></title>
    <link href="http://minling.github.io/blog/2015/07/16/tale-of-two-languages/"/>
    <updated>2015-07-16T00:39:28-04:00</updated>
    <id>http://minling.github.io/blog/2015/07/16/tale-of-two-languages</id>
    <content type="html"><![CDATA[<h1>Ruby vs. Javascript</h1>

<h2>Tale of Two Languages</h2>

<p>Ruby and Javascript are very difference languages in many ways such as their syntax, methods, and ways of defining functions. Ruby tends to be shorter and more compact but javascript seems to be more explicit in defining their values such as putting function(), and var in front of the object. Both are object oriented programming languages, where they have a class and objects and methods that associates with them are organized in a proper way.</p>

<h2>Functions</h2>

<p><strong>Javascript</strong> has two ways of defining functions</p>

<ul>
<li>function expressions</li>
<li>function declarations</li>
</ul>


<p>Here is a <strong>function declaration</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span> <span class="nx">cat</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">prompt</span><span class="p">(</span><span class="s2">&quot;Do you like cats?&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a <strong>function expression</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">cat</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">prompt</span><span class="p">(</span><span class="err">&quot;</span><span class="nx">Do</span> <span class="nx">you</span> <span class="nx">like</span> <span class="nx">cats</span><span class="o">?</span><span class="p">)</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>Ruby on the other hand, has three types of functions</p>

<ul>
<li>blocks</li>
<li>procs</li>
<li>lambdas</li>
</ul>


<p>Here is a <strong>block</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a <strong>proc</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">p</span> <span class="o">=</span> <span class="no">Proc</span><span class="o">.</span><span class="n">new</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="nb">p</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is a <strong>lambda</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lam</span> <span class="o">=</span> <span class="nb">lambda</span> <span class="p">{</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">x</span><span class="o">*</span><span class="mi">2</span> <span class="p">}</span>
</span><span class='line'><span class="o">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="o">].</span><span class="n">each</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lam</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Procs and lambdas seem to be closer to a function expression in javascript, because you can set a block to a variable and then call it later.</p>

<h2>Iterations</h2>

<p>In Ruby:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">arr</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="k">for</span> <span class="n">item</span> <span class="k">in</span> <span class="n">arr</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="n">item</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Javascript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">];</span>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">arr</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">arr</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In this way, javascript seems to be more explicit in showing the types of each element of the method. Javascript specifies var for the variable, and also it lists out the variable to start iteration, the condition for the loop to run, and what happens after each iteration.</p>

<p>Since ruby and javascript are quite different they also have similar methods, that are sometimes called different things but mean the same thing.</p>

<table>
<thead>
<tr>
<th> Ruby </th>
<th> Javascript </th>
</tr>
</thead>
<tbody>
<tr>
<td> push </td>
<td> push</td>
</tr>
<tr>
<td> reverse</td>
<td> reverse</td>
</tr>
<tr>
<td> map </td>
<td> map </td>
</tr>
<tr>
<td> index </td>
<td> indexOf </td>
</tr>
<tr>
<td> all? </td>
<td> every </td>
</tr>
<tr>
<td> any? </td>
<td> some  </td>
</tr>
<tr>
<td> slice </td>
<td> slice </td>
</tr>
<tr>
<td> each </td>
<td> forEach</td>
</tr>
<tr>
<td> index</td>
<td> indexOf</td>
</tr>
<tr>
<td> split </td>
<td> split</td>
</tr>
<tr>
<td> has_key?</td>
<td> hasOwnProperty </td>
</tr>
<tr>
<td> to_i </td>
<td> parseInt</td>
</tr>
<tr>
<td> .class </td>
<td> typeof() </td>
</tr>
</tbody>
</table>


<p>Methods that do not exist in Javascript:</p>

<ul>
<li>include?</li>
</ul>


<p>Other Comparisons:</p>

<table>
<thead>
<tr>
<th> Ruby </th>
<th> Javascript </th>
</tr>
</thead>
<tbody>
<tr>
<td>puts </td>
<td> console.log()</td>
</tr>
<tr>
<td>nil, false </td>
<td> 0, null, false, &ldquo;&rdquo;, undefined, NaN</td>
</tr>
</tbody>
</table>


<p>Return is usually used in Javascript, but not in Ruby, because Ruby returns the value of the last line in the method. Javascript will not return it without it explicitly being called return.</p>

<h3>Arrays</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="no">Ruby</span>              <span class="n">vs</span><span class="o">.</span>       <span class="no">Javascript</span>
</span><span class='line'><span class="o">|</span> <span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span>             <span class="o">|</span> <span class="n">var</span> <span class="n">a</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;1&quot;</span><span class="p">,</span> <span class="s2">&quot;2&quot;</span><span class="o">]</span><span class="p">;</span><span class="o">|</span>
</span><span class='line'><span class="o">|</span><span class="n">a</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">)</span>                 <span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="s2">&quot;3&quot;</span><span class="p">);</span> <span class="o">|</span>
</span><span class='line'><span class="o">|</span><span class="n">a</span><span class="o">.</span><span class="n">all?</span><span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">}</span>           <span class="o">|</span> <span class="n">a</span><span class="o">.</span><span class="n">every</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">n</span> <span class="o">&gt;</span> <span class="mi">4</span><span class="p">;</span> <span class="p">});</span>
</span><span class='line'><span class="o">|</span><span class="n">a</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span><span class="o">|</span><span class="n">n</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">n</span><span class="p">}</span>         <span class="o">|</span><span class="n">a</span><span class="o">.</span><span class="n">forEach</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span> <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="n">n</span><span class="p">);</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Hashes</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="ss">Ruby</span><span class="p">:</span>
</span><span class='line'><span class="n">hashPetName</span> <span class="o">=</span> <span class="p">{</span> <span class="s2">&quot;dog&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Rex&quot;</span><span class="p">,</span> <span class="s2">&quot;cat&quot;</span> <span class="o">=&gt;</span> <span class="s2">&quot;Mistigri&quot;</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">hashPetName</span><span class="o">[</span><span class="s1">&#39;dog&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Rex&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Javascript</span><span class="p">:</span>
</span><span class='line'><span class="n">var</span> <span class="n">hashPetName</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">dog</span><span class="p">:</span> <span class="s2">&quot;Rex&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">cat</span><span class="p">:</span> <span class="s2">&quot;Mistigri&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">hashPetName</span><span class="o">[</span><span class="s1">&#39;dog&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s2">&quot;Rex&quot;</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Functions</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Ruby</span><span class="p">:</span>
</span><span class='line'><span class="k">def</span> <span class="nf">sample_func</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Javascript</span><span class="p">:</span>
</span><span class='line'><span class="n">function</span> <span class="n">sample_func</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">console</span><span class="o">.</span><span class="n">log</span><span class="p">(</span><span class="s2">&quot;Hello World&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Classes</h2>

<p>Javascript&rsquo;s equivalent to Ruby&rsquo;s class is called a Prototype. To make a new Prototype, just create a new function with a name with aguments.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Ruby</span><span class="p">:</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:firstName</span><span class="p">,</span> <span class="ss">:lastName</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">firstName</span><span class="p">,</span> <span class="n">lastName</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@firstName</span> <span class="o">=</span> <span class="n">firstName</span>
</span><span class='line'>    <span class="vi">@lastName</span> <span class="o">=</span> <span class="n">lastName</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Javascript</span><span class="p">:</span>
</span><span class='line'><span class="n">function</span> <span class="no">Person</span><span class="p">(</span><span class="n">firstName</span><span class="p">,</span> <span class="n">lastName</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">this</span><span class="o">.</span><span class="n">firstName</span> <span class="o">=</span> <span class="n">firstName</span><span class="p">;</span>
</span><span class='line'>  <span class="n">this</span><span class="o">.</span><span class="n">lastName</span> <span class="o">=</span> <span class="n">lastName</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Math</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Ruby</span><span class="p">:</span>
</span><span class='line'><span class="o">[-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="o">&amp;</span><span class="ss">:+</span><span class="p">)</span> <span class="c1"># 30</span>
</span><span class='line'>
</span><span class='line'><span class="ss">Javascript</span><span class="p">:</span>
</span><span class='line'><span class="o">[-</span><span class="mi">5</span><span class="p">,</span> <span class="mi">15</span><span class="p">,</span> <span class="mi">20</span><span class="o">].</span><span class="n">reduce</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="n">sum</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span> <span class="n">sum</span> <span class="o">+</span> <span class="n">value</span><span class="p">;</span> <span class="p">},</span> <span class="mi">0</span><span class="p">)</span> <span class="sr">//</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Associations]]></title>
    <link href="http://minling.github.io/blog/2015/07/02/associations/"/>
    <updated>2015-07-02T00:49:11-04:00</updated>
    <id>http://minling.github.io/blog/2015/07/02/associations</id>
    <content type="html"><![CDATA[<h2>Active Record and Associations with Sinatra</h2>

<p><img src="https://upload.wikimedia.org/wikipedia/en/2/2c/Sinatralogo.png" alt="Sinatra" /></p>

<p>Sinatra is a domain specific language that wraps HTTP requests and responses on top of Rack. Sinatra is similar to Ruby; they are both web frameworks. Sinatra is used for smaller web applications.</p>

<p>When you want to build something, like say a web application where a user can submit a blog post, ActiveRecord is a great framework to use to keep track of databases and their data, and also their associations.</p>

<p>Here is a sample migration for creating the posts table. author_id is the association of the posts to the author.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CreatePosts</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">change</span>
</span><span class='line'>    <span class="n">create_table</span> <span class="ss">:posts</span> <span class="k">do</span> <span class="o">|</span><span class="n">t</span><span class="o">|</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">string</span> <span class="ss">:title</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">text</span> <span class="ss">:content</span>
</span><span class='line'>      <span class="n">t</span><span class="o">.</span><span class="n">integer</span> <span class="ss">:author_id</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Eventually you will have a database that will look something like these charts, filled with seed data.</p>

<p>Posts Table</p>

<table>
<thead>
<tr>
<th> id </th>
<th> title </th>
<th> Content </th>
<th> Author_id </th>
</tr>
</thead>
<tbody>
<tr>
<td> 1  </td>
<td> &ldquo;cats&rdquo;</td>
<td> &ldquo;meow meow&rdquo; </td>
<td> 1         </td>
</tr>
<tr>
<td> 2  </td>
<td> &ldquo;dogs&rdquo;</td>
<td> &ldquo;woof woof&rdquo; </td>
<td> 2         </td>
</tr>
</tbody>
</table>


<p>Author table</p>

<table>
<thead>
<tr>
<th> id </th>
<th> author </th>
</tr>
</thead>
<tbody>
<tr>
<td> 1  </td>
<td> &ldquo;Mr Kitty&rdquo;</td>
</tr>
<tr>
<td> 2  </td>
<td> &ldquo;Mr Puppy&rdquo;</td>
</tr>
</tbody>
</table>


<p>Tags Table</p>

<table>
<thead>
<tr>
<th> id </th>
<th> tag </th>
</tr>
</thead>
<tbody>
<tr>
<td> 1  </td>
<td> cats</td>
</tr>
<tr>
<td> 2  </td>
<td> dogs</td>
</tr>
<tr>
<td> 3  </td>
<td> parks</td>
</tr>
</tbody>
</table>


<p>Post_tags table &mdash;> needed because posts has many tags, and tags has many posts, so there must be a join table created to satisfy those requirements. It is not simply just a table that either has_many or belongs_to anymore.</p>

<table>
<thead>
<tr>
<th> id </th>
<th> post_id </th>
<th> tag_id </th>
</tr>
</thead>
<tbody>
<tr>
<td> 1  </td>
<td> 1 </td>
<td> 1</td>
</tr>
<tr>
<td> 2  </td>
<td> 2</td>
<td> 2</td>
</tr>
<tr>
<td> 3 </td>
<td> 2 </td>
<td> 3 </td>
</tr>
</tbody>
</table>


<p>So here, the first blog post called &ldquo;cats&rdquo; will have the tags cats.
But for the second blog post called &ldquo;dogs&rdquo; it will have the tags dogs, and also parks.</p>

<p>Now here are the models</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Posts</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:author</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:post_tags</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:tags</span><span class="p">,</span> <span class="ss">through</span><span class="p">:</span> <span class="ss">:post_tags</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>because the posts table has &ldquo;author_id&rdquo;, which means that posts belongs to an author, and an author will have many posts. Also, you must write &ldquo;has_many&rdquo; &ldquo;:post_tags&rdquo; so you can mention the join table before mentioning that posts &ldquo;has_many&rdquo; tags through the join table.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Author</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tags</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">PostTags</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'> <span class="n">belongs_to</span> <span class="ss">:post</span>
</span><span class='line'> <span class="n">belongs_to</span> <span class="ss">:tag</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Tag</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:post_tags</span>
</span><span class='line'>  <span class="n">has_many</span> <span class="ss">:posts</span><span class="p">,</span> <span class="ss">:through</span> <span class="o">=&gt;</span> <span class="ss">:post_tags</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>Some tips:</p>

<p>When writing belongs_to for a class, whatever it belongs to will typically have &ldquo;has_many&rdquo;.</p>

<p>eg. class Author &ldquo;has_many&rdquo; posts, while Posts &ldquo;belong_to&rdquo; Author</p>

<p>When associating with join tables, mention the join table, and then write &ldquo;has_many&rdquo; something through the join table in the next line.
eg. Like so in &ldquo;class Posts&rdquo; above.</p></blockquote>

<p>Provided that you have seed data, and that you want to associate a post with an author, you can first think about the author as the parent, and posts as the child (because posts belongs to an author, and an author has many posts.)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># In a console, possibly in pry, </span>
</span><span class='line'><span class="n">author</span> <span class="o">=</span> <span class="no">Author</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="c1">#=&gt;in Author class, find the author with id 1. Now author is set to the Author object with id 1.</span>
</span><span class='line'><span class="n">post</span> <span class="o">=</span> <span class="no">Post</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="c1">#=&gt;in Post class, find the post with id 2 and set it to the variable post.</span>
</span><span class='line'><span class="n">author</span><span class="o">.</span><span class="n">posts</span> <span class="c1">#=&gt; []  this gives you an empty array right now.</span>
</span><span class='line'><span class="n">author</span><span class="o">.</span><span class="n">posts</span> <span class="o">&lt;&lt;</span> <span class="n">post</span>  <span class="c1">#=&gt; shovel in the post with #2 to the author.posts array</span>
</span><span class='line'><span class="n">author</span><span class="o">.</span><span class="n">posts</span> <span class="c1">#=&gt;Now will include the Post object of id 2.</span>
</span></code></pre></td></tr></table></div></figure>


<p>When associating with Sinatra, if the model of is associated with another model, you can write that association inside the Controller.
If there was a blog controller with Sinatra:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">BlogController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@blogs</span> <span class="o">=</span> <span class="no">Blog</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="ss">erb</span><span class="p">:</span> <span class="ss">:&#39;/blogs/index&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">get</span> <span class="s1">&#39;/blog/new&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@authors</span> <span class="o">=</span> <span class="no">Author</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>    <span class="ss">erb</span><span class="p">:</span> <span class="ss">:&#39;blogs/new&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the blogs controller, if you wanted to create a new blog post and went to the form to input the new blog post data, you can also asisgn it to an author, to have an author association too. As long as you associated with authors in the post model, you can access it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My First Post on Octopress]]></title>
    <link href="http://minling.github.io/blog/2015/06/17/my-first-post-on-octopress/"/>
    <updated>2015-06-17T20:50:57-04:00</updated>
    <id>http://minling.github.io/blog/2015/06/17/my-first-post-on-octopress</id>
    <content type="html"><![CDATA[<h1>1. Introduction</h1>

<h1>2. .tap for Ruby</h1>

<p>  scroll to the end to read about .tap for Ruby</p>

<h2>Why am I at Flatiron?</h2>

<p>Hi there! My name is Minling and I just graduated with a bachelors in Biomolecular Sciences. Although I love biology and its cute little microorganisms, I was always into technology. More often times than not have I said &ldquo;wow wouldn&rsquo;t it be cool if I built this&hellip;&rdquo;, &ldquo;oh wait nevermind, I don&rsquo;t even know how to get code.&rdquo;</p>

<p><strong>Time is a limited resource, and if lost, it will never be found.</strong></p>

<p>With a finite number of heartbeats in a lifetime, and a finite amount of hours in a day, there is just absolutely no time to waste. People ponder for a long time whether they have taken that risk, but that is just too much time spent being indecisive.
<img src="http://brandchannel.com/wp-content/uploads/2013/07/Nike-JustDoIt-560.jpg" alt="Nike just do it" /></p>

<p>What if you just did it?</p>

<p>If you fail, it&rsquo;ll be a great lesson to learn, but if you don&rsquo;t, you win.</p>

<blockquote><p><strong>“Any chance not taken is an opportunity missed.”
― Ken Petti</strong></p></blockquote>

<p>Of course it is said easier than done. You can sit there all day looking at motivational quotes but until you make that first step, you aren&rsquo;t actually listening to any of it.</p>

<p>Some people have lateness issues but it isn&rsquo;t because they don&rsquo;t care enough to change, or respect other people&rsquo;s time. They may have other issues in their life that prevents them from realizing the importance of being on time. No matter how much they are told to be on time, they will never be on time, because they have&rsquo;t gotten to that realization yet. People can&rsquo;t be progammed to change, it is up to their own will.</p>

<p>There are people who are creators and others who just want to experience the creations. I want to be a creator of beautiful things. I want to build meaningful, memorable apps that would make someone&rsquo;s life easier or something cool that people would use. I want to make a dent in this world with my creations.</p>

<p>Sometimes when times get hard, I fall back to pondering whether I have made the right decision, because I made a drastic change in my life to learn to code. I could have stayed in biology and tried to go forward in my career, but I wouldn&rsquo;t be able to bring my crazy ideas to reality. I guess I&rsquo;ll never know until it all happens.</p>

<blockquote><p>“You can’t connect the dots looking forward; you can only connect them looking backwards. So you have to trust that the dots will somehow connect in your future. You have to trust in something — your gut, destiny, life, karma, whatever. This approach has never let me down, and it has made all the difference in my life.”</p>

<p>~ Steve Jobs</p></blockquote>

<h2>#tap dat &hellip;</h2>

<p>A few times I encountered the usage of #tap in Ruby.</p>

<blockquote><p>tap{|x|&hellip;} → obj</p>

<p>Yields self to the block, and then returns self. The primary purpose of this method is to “tap into” a method chain, in order to perform operations on intermediate results within the chain.</p></blockquote>

<p>Although that is the definition of the Ruby Doc, it isn&rsquo;t quite clear on how to use it, at least it wasn&rsquo;t clear to me.</p>

<p>Essentially, this is what .tap does</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Object</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">tap</span>
</span><span class='line'>    <span class="k">yield</span> <span class="nb">self</span>
</span><span class='line'>    <span class="nb">self</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">cats</span>
</span><span class='line'>  <span class="n">array</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;paws&#39;</span><span class="p">,</span> <span class="s1">&#39;furry&#39;</span><span class="p">,</span> <span class="s1">&#39;cute&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">array</span><span class="o">.</span><span class="n">reverse!</span>
</span><span class='line'>  <span class="n">array</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;cute&quot;, &quot;furry&quot;, &quot;paws&quot;] </span>
</span></code></pre></td></tr></table></div></figure>


<p>Using .tap will achieve the same in one line.</p>

<p>You can use the object to do something, and then it wil return itself at the end.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">cats</span>
</span><span class='line'>  <span class="o">[</span><span class="s1">&#39;paws&#39;</span><span class="p">,</span> <span class="s1">&#39;furry&#39;</span><span class="p">,</span> <span class="s1">&#39;cute&#39;</span><span class="o">].</span><span class="n">tap</span><span class="p">(</span><span class="o">&amp;</span><span class="ss">:reverse!</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="c1">#=&gt; [&quot;cute&quot;, &quot;furry&quot;, &quot;paws&quot;] </span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://igcdn-photos-c-a.akamaihd.net/hphotos-ak-xaf1/t51.2885-15/11335852_1441788479455650_419649704_n.jpg" alt="cats" />
Kitty: &ldquo;Smells like a good method.&rdquo;</p>
]]></content>
  </entry>
  
</feed>
